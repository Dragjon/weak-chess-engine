#include "chess.hpp"
#include "bitboard.hpp"

using namespace chess;
using namespace std;

// Entire evaluation function is tuned with non other than Gedas' Texel tuner <3
// https://github.com/GediminasMasaitis/texel-tuner

// Helper: LSB index
int32_t lsb(uint64_t bb) {
    assert(bb != 0);
    return __builtin_ctzll(bb);
}

// Helper: Pop LSB and return its index
int32_t pop_lsb(uint64_t &bb) {
    assert(bb != 0);
    int32_t index = __builtin_ctzll(bb);
    bb &= bb - 1; // Clear the LSB
    return index;
}

// Passed pawn masks
const uint64_t WHITE_PASSED_MASK[64] = {
    217020518514230016ull,    506381209866536704ull,
    1012762419733073408ull,    2025524839466146816ull,
    4051049678932293632ull,    8102099357864587264ull,
    16204198715729174528ull,    13889313184910721024ull,
    217020518514229248ull,    506381209866534912ull,
    1012762419733069824ull,    2025524839466139648ull,
    4051049678932279296ull,    8102099357864558592ull,
    16204198715729117184ull,    13889313184910671872ull,
    217020518514032640ull,    506381209866076160ull,
    1012762419732152320ull,    2025524839464304640ull,
    4051049678928609280ull,    8102099357857218560ull,
    16204198715714437120ull,    13889313184898088960ull,
    217020518463700992ull,    506381209748635648ull,
    1012762419497271296ull,    2025524838994542592ull,
    4051049677989085184ull,    8102099355978170368ull,
    16204198711956340736ull,    13889313181676863488ull,
    217020505578799104ull,    506381179683864576ull,
    1012762359367729152ull,    2025524718735458304ull,
    4051049437470916608ull,    8102098874941833216ull,
    16204197749883666432ull,    13889312357043142656ull,
    217017207043915776ull,    506373483102470144ull,
    1012746966204940288ull,    2025493932409880576ull,
    4050987864819761152ull,    8101975729639522304ull,
    16203951459279044608ull,    13889101250810609664ull,
    216172782113783808ull,    504403158265495552ull,
    1008806316530991104ull,    2017612633061982208ull,
    4035225266123964416ull,    8070450532247928832ull,
    16140901064495857664ull,    13835058055282163712ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull
};

const uint64_t BLACK_PASSED_MASK[64] = {
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    3ull,    7ull,
    14ull,    28ull,
    56ull,    112ull,
    224ull,    192ull,
    771ull,    1799ull,
    3598ull,    7196ull,
    14392ull,    28784ull,
    57568ull,    49344ull,
    197379ull,    460551ull,
    921102ull,    1842204ull,
    3684408ull,    7368816ull,
    14737632ull,    12632256ull,
    50529027ull,    117901063ull,
    235802126ull,    471604252ull,
    943208504ull,    1886417008ull,
    3772834016ull,    3233857728ull,
    12935430915ull,    30182672135ull,
    60365344270ull,    120730688540ull,
    241461377080ull,    482922754160ull,
    965845508320ull,    827867578560ull,
    3311470314243ull,    7726764066567ull,
    15453528133134ull,    30907056266268ull,
    61814112532536ull,    123628225065072ull,
    247256450130144ull,    211934100111552ull,
    847736400446211ull,    1978051601041159ull,
    3956103202082318ull,    7912206404164636ull,
    15824412808329272ull,    31648825616658544ull,
    63297651233317088ull,    54255129628557504ull
};

const uint64_t OUTER_2_SQ_RING_MASK[64] = {
    289363972639948800ull,    578729044791525376ull,
    1229798258109317120ull,    2459596516218634240ull,
    4919193032437268480ull,    9838386064874536960ull,
    1157688987024883712ull,    2315096499073056768ull,
    289360704169836544ull,    578721412634640384ull,
    1229782998090514432ull,    2459565996181028864ull,
    4919131992362057728ull,    9838263984724115456ull,
    1157443727212412928ull,    2314886354913198080ull,
    505533473516158976ull,    1083124541087023104ull,
    2238589255012057088ull,    4477178510024114176ull,
    8954357020048228352ull,    17908714040096456704ull,
    17298343833662128128ull,    16149943589319737344ull,
    1974740130922496ull,    4230955238621184ull,
    8744489277390848ull,    17488978554781696ull,
    34977957109563392ull,    69955914219126784ull,
    67571655600242688ull,    63085717145780224ull,
    7713828636416ull,    16527168900864ull,
    34158161239808ull,    68316322479616ull,
    136632644959232ull,    273265289918464ull,
    263951779688448ull,    246428582600704ull,
    30132143111ull,    64559253519ull,
    133430317343ull,    266860634686ull,
    533721269372ull,    1067442538744ull,
    1031061639408ull,    962611650784ull,
    117703684ull,    252184584ull,
    521212177ull,    1042424354ull,
    2084848708ull,    4169697416ull,
    4027584528ull,    3760201760ull,
    459780ull,    985096ull,
    2035985ull,    4071970ull,
    8143940ull,    16287880ull,
    15732752ull,    14688288ull
};

const uint64_t WHITE_AHEAD_MASK[64] = {
    72340172838076672ull,    144680345676153344ull,
    289360691352306688ull,    578721382704613376ull,
    1157442765409226752ull,    2314885530818453504ull,
    4629771061636907008ull,    9259542123273814016ull,
    72340172838076416ull,    144680345676152832ull,
    289360691352305664ull,    578721382704611328ull,
    1157442765409222656ull,    2314885530818445312ull,
    4629771061636890624ull,    9259542123273781248ull,
    72340172838010880ull,    144680345676021760ull,
    289360691352043520ull,    578721382704087040ull,
    1157442765408174080ull,    2314885530816348160ull,
    4629771061632696320ull,    9259542123265392640ull,
    72340172821233664ull,    144680345642467328ull,
    289360691284934656ull,    578721382569869312ull,
    1157442765139738624ull,    2314885530279477248ull,
    4629771060558954496ull,    9259542121117908992ull,
    72340168526266368ull,    144680337052532736ull,
    289360674105065472ull,    578721348210130944ull,
    1157442696420261888ull,    2314885392840523776ull,
    4629770785681047552ull,    9259541571362095104ull,
    72339069014638592ull,    144678138029277184ull,
    289356276058554368ull,    578712552117108736ull,
    1157425104234217472ull,    2314850208468434944ull,
    4629700416936869888ull,    9259400833873739776ull,
    72057594037927936ull,    144115188075855872ull,
    288230376151711744ull,    576460752303423488ull,
    1152921504606846976ull,    2305843009213693952ull,
    4611686018427387904ull,    9223372036854775808ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull
};

const uint64_t BLACK_AHEAD_MASK[64] = {
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    1ull,    2ull,
    4ull,    8ull,
    16ull,    32ull,
    64ull,    128ull,
    257ull,    514ull,
    1028ull,    2056ull,
    4112ull,    8224ull,
    16448ull,    32896ull,
    65793ull,    131586ull,
    263172ull,    526344ull,
    1052688ull,    2105376ull,
    4210752ull,    8421504ull,
    16843009ull,    33686018ull,
    67372036ull,    134744072ull,
    269488144ull,    538976288ull,
    1077952576ull,    2155905152ull,
    4311810305ull,    8623620610ull,
    17247241220ull,    34494482440ull,
    68988964880ull,    137977929760ull,
    275955859520ull,    551911719040ull,
    1103823438081ull,    2207646876162ull,
    4415293752324ull,    8830587504648ull,
    17661175009296ull,    35322350018592ull,
    70644700037184ull,    141289400074368ull,
    282578800148737ull,    565157600297474ull,
    1130315200594948ull,    2260630401189896ull,
    4521260802379792ull,    9042521604759584ull,
    18085043209519168ull,    36170086419038336ull
};

const uint64_t WHITE_FRONT_MASK[64] = {
    256ull,    512ull,
    1024ull,    2048ull,
    4096ull,    8192ull,
    16384ull,    32768ull,
    65536ull,    131072ull,
    262144ull,    524288ull,
    1048576ull,    2097152ull,
    4194304ull,    8388608ull,
    16777216ull,    33554432ull,
    67108864ull,    134217728ull,
    268435456ull,    536870912ull,
    1073741824ull,    2147483648ull,
    4294967296ull,    8589934592ull,
    17179869184ull,    34359738368ull,
    68719476736ull,    137438953472ull,
    274877906944ull,    549755813888ull,
    1099511627776ull,    2199023255552ull,
    4398046511104ull,    8796093022208ull,
    17592186044416ull,    35184372088832ull,
    70368744177664ull,    140737488355328ull,
    281474976710656ull,    562949953421312ull,
    1125899906842624ull,    2251799813685248ull,
    4503599627370496ull,    9007199254740992ull,
    18014398509481984ull,    36028797018963968ull,
    72057594037927936ull,    144115188075855872ull,
    288230376151711744ull,    576460752303423488ull,
    1152921504606846976ull,    2305843009213693952ull,
    4611686018427387904ull,    9223372036854775808ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull
};

const uint64_t BLACK_FRONT_MASK[64] = {
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    0ull,    0ull,
    1ull,    2ull,
    4ull,    8ull,
    16ull,    32ull,
    64ull,    128ull,
    256ull,    512ull,
    1024ull,    2048ull,
    4096ull,    8192ull,
    16384ull,    32768ull,
    65536ull,    131072ull,
    262144ull,    524288ull,
    1048576ull,    2097152ull,
    4194304ull,    8388608ull,
    16777216ull,    33554432ull,
    67108864ull,    134217728ull,
    268435456ull,    536870912ull,
    1073741824ull,    2147483648ull,
    4294967296ull,    8589934592ull,
    17179869184ull,    34359738368ull,
    68719476736ull,    137438953472ull,
    274877906944ull,    549755813888ull,
    1099511627776ull,    2199023255552ull,
    4398046511104ull,    8796093022208ull,
    17592186044416ull,    35184372088832ull,
    70368744177664ull,    140737488355328ull,
    281474976710656ull,    562949953421312ull,
    1125899906842624ull,    2251799813685248ull,
    4503599627370496ull,    9007199254740992ull,
    18014398509481984ull,    36028797018963968ull
};

const uint64_t NOT_KINGSIDE_HALF_MASK[64] = {
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull,
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull,
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull,
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull,
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull,
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull,
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull,
    17361641481138401520ull,    17361641481138401520ull,
    17361641481138401520ull,    17361641481138401520ull,
    1085102592571150095ull,    1085102592571150095ull,
    1085102592571150095ull,    1085102592571150095ull
};

const uint64_t LEFT_RIGHT_COLUMN_MASK[64] = {
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull,
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull,
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull,
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull,
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull,
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull,
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull,
    144680345676153346ull,    361700864190383365ull,
    723401728380766730ull,    1446803456761533460ull,
    2893606913523066920ull,    5787213827046133840ull,
    11574427654092267680ull,    4629771061636907072ull
};

const uint64_t PAWN_RANDOMS[2][64] = {
    { 0x251a3754cf45e288, 0x01f2e5652b779606, 0x6e23ecb84a6c9391, 0xae628c9a81050bfe, 0xf5c2026565666993, 0xf7e369e9e77463b2, 0x776fea3deac33286, 0x58dc41932419a166, 0x7cb16728117da24f, 0xd839d1df089e4dd8, 0xdcfcaeb9e23927e3, 0x4bda59a513bfc54a, 0x70cbe9ff3c60f9b4, 0x8521e704edb1d7b7, 0xfd860878f54ade5f, 0x8a00893c3e773b46, 0x68eacc2f16d3c23c, 0x3178c3a8129089ca, 0x1bc08067b0536ca7, 0xb920de266665c36d, 0x2e4b875fdd63117c, 0xff61395a47b97ac4, 0x56f6c5e2e70b2030, 0xb81d64f4d5219653, 0xe9b70cdbc05674d3, 0xb992b4e98f148c94, 0x9d2830b4a0981d4b, 0x75c3dc3c6b4e8ee4, 0x01a4da10b5a219d0, 0x1adf3fc50853e560, 0x5e6948474ad68de6, 0x0f76d632fcf92b8c, 0xc3c315a1f2295787, 0x283435a18de14040, 0x0064fba50975d182, 0x523bd51d1dacc3ce, 0xf443fdbf98758afc, 0xd9dd9bca7659c2f6, 0x8eb7fbb2d120aed0, 0xc7e5beb73210c838, 0xe2b003324b725ca5, 0x1d39ae64a8385bb9, 0xf5019f4bef7dbe15, 0xb04d19af545a5ac9, 0xd4087a3b0bb7c1d2, 0xa17e6e5119fb1bf2, 0x67e2588d0af40e6c, 0x7b36de9c3d1e9c7d, 0x3a0a24d186f3de54, 0x9f4562a91b404750, 0x786cf444552ac93c, 0x7c09ecb94ebc8b54, 0xf323b3f31f40c59c, 0x60d4ce0f889bac85, 0xeee518ce15b8b044, 0xe97be341681ccc2c, 0xd794f8392bc26f30, 0x17864f86c156b9c9, 0xdae03412a5226c62, 0x65078c71a517020a, 0x623bb71c7be62edb, 0x03e92447bff6390a, 0xbd77cf988b29120a, 0xe95ed3f60d7e698f },
    { 0x7614853056f7f5b6, 0x0d05f35678bba63c, 0x68408db206e13020, 0xabfcb51ed59b000f, 0xdae1dc5e4aaf2e51, 0xa99ab6006eae98db, 0xfd2dae6893c90586, 0xe14dcfd5baa26711, 0x981e61c3223b7f31, 0x84a9316757d25a54, 0x914dd6b203a86234, 0x884ce0127ba6d983, 0xfda6d97919fdb8e7, 0x4d97340e9b554749, 0xa8cb09480ce0b5a2, 0x7770175c39dc256b, 0x3a4499e4776541cb, 0x11a8b3ca26fa1bd2, 0x86a63c9d94ba2992, 0xa2d15f90e7e57919, 0x33633765d119e06a, 0xd34e50eb09253bee, 0x81a0e263b3b2b8df, 0x3f863d9d12b3a1a2, 0xb388464206678f4c, 0xb6e5b428dee22032, 0xe38c582424b3dda5, 0x800b2120ad43d532, 0xede1c52b40c2ee79, 0x43e416b15c1688a2, 0x0f95cc5ccf824db1, 0x7d7fa241fabbda81, 0x1506478fa274aa39, 0xbd80a397005a48a9, 0xbf7abcfa332e27d8, 0xf248b9ef092593b6, 0xc28d5dc328db2ae9, 0x451345bc1987ab23, 0x743dff54dc1b55e4, 0x86b7fb443674b3bc, 0x18bbde07ecc0b6e1, 0x25de570152162f86, 0x3a34a3b06c644d3c, 0xa168dd8aa6314c0b, 0x0c301a6935f7c11c, 0xe559ca31dc45fe9d, 0xeca44407c08cc8d2, 0x8e959219eb1a34d9, 0x55e5ebe7e54d6272, 0x6d5784b076de6f5b, 0x1ea6d46dcaa3c6fb, 0x3472aa5ef56b7fd2, 0x06a289670ed7e583, 0x3a14c3e376e5eebc, 0x7e1353d6a92ab1f5, 0xee8bd39be330598f, 0x687459794d820013, 0x86780d0716e9b0ed, 0x7129df6993494fd3, 0xe64b5012c7ebaf89, 0x49b2dd9befc2e846, 0x174d80e893ec847d, 0x5e8c7d3b5073593f, 0xf8fb2dc377cd26b9 }
};

const uint64_t KNIGHT_RANDOMS[2][64] = {
    { 0x8cf02d2693e20173, 0xbd82aa39e309d4f5, 0x489a640bd4728348, 0x30fa80cc25114bec, 0x8c6ab0ed6dfbea2f, 0x27f83c7c27feea09, 0x2b15ee7d6c394ee5, 0x83aaec94d4eabb5e, 0xd4bf2e5c6e5c3bf2, 0xfcc46a21250b3280, 0x52f82080e2d92146, 0x19a8164ec7ded64b, 0x63b220a6e4057711, 0x03da10df64a7fcea, 0xacace3154a26bd9d, 0xe4f16708e1b03df7, 0xe1b3b55d8dfbeb03, 0x1d2d069f8ecfa66d, 0x95caf01100ded61a, 0xb6fa8dcf1be6148b, 0x4ebcc8db36a84c17, 0x4233befd643dcbeb, 0x3db679c9d7512309, 0x7cd5a4db6234909d, 0xa7918c0107813e30, 0x2f049a0429581630, 0xb00f5f6713be030b, 0x9cb7e51362c93342, 0x75f8105aaefcd535, 0xf82e67c424520b71, 0xd4142155bb9ff86e, 0xf0bdfaa8e2485533, 0x08b52e6e99a99097, 0x029125157bd3aeea, 0x2a5636d55b47d884, 0xfb63b35e4397b2c7, 0x7c64d9a74a3e2142, 0x10529751f9d1c684, 0x5d8ec139797f8838, 0xcab4ef650c74d80b, 0x0381d4ce6b848914, 0x1c5b47f0613a93db, 0x28db43eaba878177, 0x2f378e774712a26f, 0x2c29cb58a910e892, 0xcc422c2a11b1524c, 0x09afeb9fbcfe54c4, 0xa5a9eec562faf14a, 0xe5251d3cd1d197ac, 0xdd2fa095e72082f4, 0x977904b6b33ab7d3, 0x7a814c2c449f7188, 0xeef9580ac1c47cb5, 0xc960f1d29693878d, 0xde0f244b65d1846a, 0x9eac2ecbad3807e4, 0x1762b1ff59e8a30a, 0x98d0b48696763eb4, 0x5587a0bd87be5fab, 0xb7c55ca5bd1699a9, 0xc898e1d965509e8e, 0x88a48b6d1548b99a, 0xd2c54d6c06ed9bf2, 0x69c7da106d84e0b5 },
    { 0x3c27dd37fd2c9dc2, 0x4057197cbf8eebb3, 0x5e2f7d204e829c79, 0x18e72770c20197a2, 0x8d4d07d003b8ba59, 0xbf76b88061759af4, 0x2b1239d5266e5451, 0xbc35f3958f8d08e8, 0x3d60f46ce5921a37, 0x3e567766e11f8c64, 0x03bca66dccbe3d41, 0xef916c40ab89da43, 0x070fcab163bc09cb, 0x703e24081f2031ff, 0x614f3019f4a7168d, 0x43447015287ca308, 0xe00dec8498a9b029, 0x187d9b7509d2a33a, 0x1dae6437efb4596e, 0xf117b810874f6183, 0xda4675f08da0ff22, 0xe1d4ab0f72c9960a, 0x704a4b92e4e1f446, 0x44ff20f371c5b532, 0xcfedee9e2005b540, 0x94e788ff754591ed, 0xf70c02adf1993095, 0xd0013c9712993c90, 0x98bc5d45df566055, 0x3d67c78cd23bf8c6, 0xe5a06e46853a0c3a, 0xd59604506d71c663, 0x4aecd46ec6f1b5af, 0x28610db30ef0d957, 0x671f90fdb0b27a84, 0x54f367bccaaf3a3c, 0x7ea4b26777448711, 0xa654d0101da9c6ee, 0xc62603ca4a5b4e7e, 0xe56868124b87735b, 0x9e08882d48ce054a, 0xfca558ca177e6b6f, 0x19eb1ed41f6d82c3, 0x78541d1e09db6733, 0x4869227374072e4e, 0x246f8472190eaba8, 0x35515ac3ac158d08, 0xc8a1c84a0aeb3187, 0xa9758a710a193759, 0xc5c4f0c3fee13354, 0x0ebe04fb1213645a, 0x09a4edce707830a2, 0x8a23cc418bf2f9e9, 0xd24383ab1bff74a7, 0x31a499abde9aaf7d, 0xb5d6521b6885275e, 0x2139bc6f4fb94045, 0x75c026b255e1cc90, 0x34dcfcd52991c05e, 0xba5e584ba0cfe9f6, 0xf5054e7c071183e4, 0xba41530e62a50483, 0x11173a175b9efce2, 0x66d016824c034990 }
};

const uint64_t BISHOP_RANDOMS[2][64] = {
    { 0xe2678d0bea6430a5, 0x2a3c3946454448eb, 0x5360a8650d4bc391, 0xad7eb736f6e71e4c, 0xf6bc7ad8e0f8f214, 0x58b6e4c734133270, 0x47904315c6c1789a, 0xe1a54d3f40bb4014, 0x1f1e07c176ca8647, 0x8cf4f1c3716c8ab2, 0xc3d97be3fdaf0f28, 0x21b67c4070fb1b60, 0x6875c1b6ca1baea5, 0xcc011d1fd7a24794, 0x2ebb028800c3027f, 0x77aaa270b8f7fe1e, 0x914b76570a071e73, 0x5fd66f151c009ed3, 0xf7bc730949e83160, 0x9d0f3660ef78a413, 0x130e8f151de75eb1, 0x799171366584b856, 0xd5c50a2a87fa3b2a, 0x5b2fcecd4a59e1fd, 0x20cd7693347cafdd, 0xb477e638f2b06a90, 0x05e08b3e77fe8d2a, 0xd6cd07ebda87e24b, 0xe04d24cad6eee793, 0x119c62b60ffd2b64, 0x82e3ef8b607c98e7, 0x9c8e16b8a4eab1ca, 0x96b88fa592431da8, 0x0c888eca2888d3d3, 0xb6f98fe8599454dd, 0x454b3bf947664eb0, 0xd0a4a3684f430fd2, 0x9c3a78c108054cb8, 0xa7b02a93c6bbbf5f, 0x0f94bad01f375ef7, 0x51373a4355d0bc06, 0xf3d52bea708517eb, 0x86bf74370f0bff19, 0x47c92a82e9f52df0, 0x375abe4b0af43372, 0xddc04346599e8dd8, 0x2057fa475c585a3c, 0x9bcf29d6b0278d18, 0x59251d8644aa7e01, 0x34d89c066f738990, 0x25da4f92bf781939, 0x686e41c633511a05, 0xe91b8b8d8bcdfc67, 0x276a125fd4434418, 0xcbce5a4dded51fda, 0x8a7daedaa8d346c0, 0x522cd52163de1074, 0x0208d9fde54cc747, 0xfc0f1c64df37442f, 0xbef78bac972e7eca, 0x975016eb3b0b6421, 0x7e5fc5e7f77ce35b, 0xbd96a3366f10554d, 0x4e99742a3505246f },
    { 0xd668becb26718f98, 0xfc3491cf9d8582b8, 0xbf792679e41f1624, 0x71bd2d40434ef049, 0x898f0e64f35d701e, 0x05845cd8961eaee3, 0xf3e16f0aca75db42, 0x472da06eef449f46, 0x391401888976c623, 0x3edff9aa189196af, 0x3c249fddca3e0e87, 0x02bca490cb2f8350, 0xf54cb89121120515, 0xf65e6690ce59347c, 0x59aee63917cffe46, 0x20a459f0be37d862, 0x53e34b561294eaa0, 0x03c470701edda299, 0xe134ab54d97279e9, 0x20183d8fa8ada724, 0xd89ddaba151881d1, 0x367c3cf9b4715ef9, 0xfde10392a7d32801, 0xac8aa6b56f8e3e3e, 0x6dd8837d9278a665, 0x71cbacfb1a87044b, 0x45f363265ab4d16d, 0xdf622848bed0b4a5, 0xc6005b0b5e22d286, 0x1d0a875a4d688db6, 0xec4fa443cec0f7f0, 0x302b0d627e35ebf5, 0x227abb67fea145f4, 0xe875480f8beec5df, 0x29b4b62cbb7a3533, 0xb6fc034dc0106b52, 0xd083b152fa6604c8, 0x6c98db0b89b8aab4, 0x10b4b2a7e6cf0dde, 0xff554e30df04cd15, 0x4b5f72103a4c935b, 0x5a7ea25c4dabbeb0, 0xd237f0ee0f3536b1, 0x00fe1d24a0c15dec, 0x15b677386855977b, 0x193bca31a535c199, 0x3047412770da4d55, 0x3606cb2787e6e457, 0xf3d5de2f5c120c7f, 0xe459f63be8582105, 0x239a8d2be78b1288, 0xcfff8270769c6c43, 0x67cabcdc0001e398, 0x29b55e8ff90572fc, 0xb075596e7fec0c3e, 0x11ae75c032f4da2f, 0x0efa0bcd067e92da, 0x592faf49cb3d24fe, 0x187f22142a1c1092, 0x8f99e51f30efc6ad, 0x4357a8c466cd444f, 0xc7375086bf4805da, 0xcccd43dd7883f982, 0x473ea727bdc484dc }
};

const uint64_t ROOK_RANDOMS[2][64] = {
    { 0x4449f4b727a15eea, 0x0cd1961cc3521eaf, 0x7648af8b3b32a41a, 0xedb656d832329b76, 0xfc173e347a94ed02, 0x491e69cacf7138b9, 0x8f1d4993f3593e8e, 0x900aebae80940428, 0x718c41a21bfabf80, 0xe6951b48fc7236a0, 0x3697f87bf1299542, 0x2eb1a256def566e3, 0x5fa379e21ad7306b, 0xc7260cac5f641100, 0x9cfff3f29d04d5c5, 0x5a32a7408e6e8933, 0x07882a5f6b1d176e, 0x935ee806ed3a8f2c, 0x5b8cef394c169431, 0x6330920c16815035, 0x14ead6c4e0ec77f6, 0xba62de27ade946d8, 0x43d613ce5cbcf574, 0xaaac3190d0a5fbd8, 0xcfa54f2e7dacb10d, 0x5066d6a86d3091a3, 0x57f4350040810e71, 0x8d54d730501f30cb, 0x60b9da076a6d985a, 0x701cd2f50c05b0c2, 0xc3616fd648034ada, 0xec5374ad4aa339a7, 0x3b9650b153afea5a, 0x68115dc3fb63ea72, 0x6e3a387542756ba0, 0xbc42febbcbc0b3cf, 0x512bb53f411ca787, 0x1d6db6cb7b6766ab, 0x52e586d3128f8b0f, 0xa351c1db08662e5c, 0x252fdc43ab8c8f98, 0xdde82f5cf7ba06d4, 0xf0d3a7204a65e2b1, 0x5c35a51024e4ffbf, 0x358c3705612066ad, 0xc9c0f0bfcc564cf3, 0xe0e2d0e290733a0c, 0x83079c4ba5e68ac6, 0x57c48201c3c27938, 0x17a8e037ef9435c8, 0xdc210d4c08be8e76, 0x3cccf695ce6499c9, 0xc13649b0b6c18cf0, 0xdce77349f0134eb3, 0xc632689312f60514, 0xcca44c7ae5388d53, 0x4645736a8f64a060, 0x881e07be4537fa35, 0x025fbfc15f371cf9, 0x17a65f43f2ab9749, 0x5210adc1d4fadb7e, 0x4a30d6f516f3fe59, 0x5545fb648b4338ce, 0xf46bb21262c2e81b },
    { 0x33780c826a3182b5, 0x3fb9489f56350346, 0xf8e4989061451ec5, 0xc35ed40360800e47, 0x295cf88908b2b443, 0xe42213542540a8e9, 0x810a2cce96950db9, 0x64778f30b9a0a153, 0x506d6dfd3d917a0c, 0x33d53b13a7a038e7, 0xe87cada928311224, 0xbbacafdd504a20aa, 0x8410ced0ff564a90, 0x06a9cbea80d87706, 0xfa86ecca9a85c599, 0xf93dc645f04b87e3, 0xe2c65c017de27b2f, 0xad9501fd6a17e342, 0x85ad0ce3b0de9c3b, 0x9ea39112eb69b010, 0x7d475558f006f4a6, 0xe7405f2b69b5976b, 0xeb265925b03a0fb9, 0xa468499fdf1036a0, 0xf824ccb9a2825026, 0x40027daca00f2d14, 0xc8bffae0f5b73bd4, 0xc399a69f1c3899b0, 0x0a15fa27754d5f4f, 0xe0be457b1f837842, 0x7a0919b201a086a4, 0x739f87f6da0a54f1, 0x3bef33aff230ef44, 0x5f141be991095c47, 0x36d25718ede68c6c, 0xee32da5f092ee304, 0x302a69dc014c9091, 0x1c28b616626fed9b, 0xc2544aed6f8b3024, 0x93896f1bf4546401, 0x8d8775b526859dcf, 0x6f1d1387cd4482fb, 0x6d9b0dfc92c5bc22, 0x21e940409796ac98, 0xba97910c01b01eb4, 0x38a2af37a84cd432, 0xbb96c1bd27555bdd, 0x6a592dbb28100e42, 0x5490dc4513c8ff27, 0xa595bfa96ec12d6b, 0xee443f8b38ad7e6a, 0x266599d74cbad5b1, 0xac09741bfa8c44eb, 0x0043963b5eae53b6, 0xa79796c10d8257ea, 0x4513e040541f3eaa, 0x34d4d51e66eb9586, 0xb93c41361ffaf8e3, 0x2fd46f3a12f9cbd8, 0x4b8e2165ce849471, 0x1208c42a13e085b0, 0xb8e72802a36df6a1, 0x3454dbd6224772a6, 0xc0b394be5df4ec87 }
};

const uint64_t QUEEN_RANDOMS[2][64] = {
    { 0xa1eb73781cf9ee05, 0x0429b59f97e17e9e, 0x723dbbf442ebdab6, 0xc88d8fde7be571be, 0x72d38b3dea0dbc7c, 0x788e06cb71c28777, 0xae507c9eea64aeac, 0xc2b0e1544a9125be, 0xd342cc07fac5a899, 0x873840bfde325f44, 0x9ae86720f67fadd6, 0x8b8fd50a1754a270, 0x3dddbebc99877709, 0x297483faa9a9e901, 0x66a7d30bcb312361, 0xa28469da5c0e6e4b, 0x3c7ddbf96ec25d56, 0x24660dc164be21ed, 0x641f66af32423a83, 0x3765da0a8ca2ed45, 0x82f036053ee3b18a, 0x9ff1395ebcf17cec, 0xb907e157c12beed8, 0x8add1334764b7a39, 0x7941ee0468285ad2, 0x284cb11881bd9b6b, 0xd625083879d48429, 0x217ba00e7b9e2074, 0xd0d33f4493489961, 0x6616dd45624ff91d, 0x6a16448a7c8e6ef3, 0xd272d4cd0cfed2d8, 0xb995dabfd58be973, 0xe8ef05a79f0c2cdd, 0xe0ddfea5c3ba0adf, 0x91145c97f6fa962a, 0x530b6ce0f98568c4, 0x370356b098f929cb, 0xda563981ceceef38, 0x7fe54dd4d34b8d97, 0x34e53a5fe706394c, 0xa896965ce912c42a, 0xc5e89927beb45e66, 0x71f3efbb284b8821, 0xf8451e8ccf6dd787, 0x1cb08bfc068b6b80, 0x24a958c9246031b8, 0x9b2e9472e1c9a52e, 0x2f9b3e29674698de, 0xf79dd0f0a9ca6b4b, 0x92b595237a759165, 0x6644a5e2117a6899, 0x0d97b6907bfed43c, 0x1589511644a7407e, 0x326bfc5f3d0fe3fc, 0x72906fd02c62ee9f, 0xd4a542dd5d6f942e, 0xaf26ed7ecaefb1cf, 0xe6bfad8f288502e1, 0xdf1935a452b32bc5, 0xc9e6e24780eed37a, 0x49ea88d6f9475b2b, 0x27f3b0994248dacd, 0x06823ad1ad943bfa },
    { 0x7b3db4dcf11025b0, 0x5b3b549316f54b18, 0xe8bec3e41c9fbfbd, 0xf2dcdaea357d0ba2, 0x6dc4a11e6c4d47c4, 0x3fe3d5218a1bbe92, 0xaf1870264d6c19fd, 0xf40f035eb8120044, 0x3833d66b80432124, 0x8681574cb7575b06, 0x82ee2eebc843ad66, 0x02a645ed1d1e3f99, 0xd35817cf2a6cc3ea, 0x0e5f4981c91efc5f, 0xfd8b7966c358c78b, 0x9d69025006559eda, 0x44c5216aff252693, 0x53b0c1c5b897ae89, 0x6278d75ce4291210, 0xd4d81dd7f8c8e237, 0xdbbf5a36ee4406c8, 0x6389f53866e34a00, 0x4f58cabf100f18d0, 0x7d093e631499b3c8, 0xa0b7c160b526505d, 0x9d53578b88642f3a, 0x41ab69ffbc99d868, 0x55aada66f8562435, 0xa35c2b524120da35, 0xdcfad8ae0b00f888, 0x3b2fa3dda6ca0222, 0x67c51b8eb65c9e02, 0x76e83168f6c16493, 0x397c79d3cd171002, 0x18b8af7146f90e0f, 0x43c7b3e34178933d, 0xeb613072e49efcf6, 0xea4db0186a8a0599, 0x2fd1add9e3dfd03e, 0x237ab13e91c6a5f6, 0x2dd98b838e55d141, 0xfd94b5c7191b8097, 0xf5fae93454fb3a7b, 0x54302acc2a15dbad, 0x60d0c92393afff73, 0x08013aa1bab5cca1, 0x03f9291e0cfc04ef, 0x26f0bc7eeef570d4, 0x3784c1c66f9fb1c4, 0xa4cc6755230ea68e, 0xea0a539cbf327d43, 0xdedca4f485a400e8, 0x1d608fb966249c1d, 0xe3a0825c9f0fbfa0, 0x88540ef5c1e9a9e8, 0xee0dcea61ea53cb9, 0x53d7ca11d7a58ed7, 0xc2f5a7da2fe9355f, 0x2a547fb23390dff8, 0xeace398644f50f38, 0x3f18a8d46cb3a0e9, 0xbb574e7b080b73a5, 0x50fd09179c60ce07, 0x273e255330a03c3f }
};

const uint64_t KING_RANDOMS[2][64] = {
    { 0xda0851f89e546c61, 0x46d1bb6b3a0b320a, 0x0b04276e75111cca, 0x3ee028465dd371c5, 0x7b4c4e7fcf12fbf5, 0x8562055778f03b26, 0x04fbf8afc30ed894, 0xf6a3ed9a1aeceed5, 0x2a96127b1f6aae14, 0x1b1d61a33f1178ed, 0xc945351987be6021, 0x4d8976b36c93b601, 0x135496179214306e, 0xcf98715e481a0b94, 0x0d531a4a50d5e0be, 0x5c67f42c265a2acc, 0x3b16520583c699e9, 0x0e72fd723338560d, 0x962428b66401f685, 0xb3da7cde7bef0da2, 0xc87f860fa35c8bdb, 0xb4b92e43827a3f54, 0x270c6b60dd44c96c, 0x39543e82ee8d6f60, 0xfc42bdb7c71408d4, 0x6e4634e9e7db4ace, 0xb39be9cac01da1e7, 0x5e4bb2e289887846, 0x62e9a415708cfcbe, 0x83adcaf83ae53b03, 0xab992b5cad580fb1, 0x38509c33eb61c641, 0x2148ad45ddb9fd61, 0x0d4531a85bdb5e51, 0x4dd06dee25b36ac4, 0x2c44bcf415982262, 0xa2c905c9761fae4c, 0x28d10ec373afd559, 0x49b3df51b8518d08, 0x4325ea00af0d1763, 0xdd9508aa6d59dd7d, 0xa9a9ea5d044cea04, 0xdce83865e8d9e7a5, 0x24b394d5d25a882f, 0xe716d417c9d2ce94, 0x44085f409f9ed1c5, 0xe88c15ebbd4a466f, 0x5f035bc913f592ca, 0x19176805b60ff03a, 0x08fe8b6dc0ec552c, 0xbb2d4989ad717ef0, 0xfe2028bfea8fcb76, 0x9bc95fc5b22b766c, 0x5f5a2c3fef928b82, 0x3aa5e05a92febeb4, 0xc98dbfaa8f3fad9b, 0xc1ebbeacd66b35ac, 0x9d6be42824110146, 0x3d099ee4ab1f5e36, 0xf95bedf8bf03b302, 0x5f9820d67f7e3e61, 0x55287fb9cd40d8e4, 0xbee54c9637bdc3c5, 0x08067395722a0e46 },
    { 0xfbdbd731dcaa9b77, 0xff3f44aae50542d2, 0x0c2e9ab8922a6169, 0x268bbf087849b035, 0x0224ef92cce6ea55, 0x50ffecb2a3092a65, 0x2451b74dee78fa80, 0xb9130e1e2e0ed62e, 0x39e09063e8a03dc2, 0x6d327ab9fd99bf43, 0x0ab1be733c7de70e, 0x464cb4779ad612f5, 0x1fb89f53f4adf721, 0x071a2055b40f2093, 0x449ceb7d0d8a5bc6, 0x9de5edd6796ff88c, 0x9436984371e86cac, 0xff0d3f6ea23b0e76, 0xa8a2f68932993395, 0x145b17ff476a0bd0, 0xdb31e34178c51123, 0xf8a56be60ef9374c, 0xe7b74b9ff3cd7198, 0xc7ae4bce25b6b31a, 0xd1d06872491f752b, 0x623447906f26b6dd, 0xbd084796d12d54c1, 0xb3473222f6120652, 0xfc25f1ee86f648ed, 0x489162f347ecfc17, 0xd443a4b4153f75dc, 0x1ee89a975af4a0f0, 0xea5a0f31345cb0ba, 0x6414335b526199c7, 0x6cfb97923cf8f367, 0x2e76732912b05dd0, 0xafde1257bee2e8fa, 0xcc76fe543401484a, 0xdfdf1613a91c5a17, 0x671edfe10e80075c, 0xb7a0dc042ed8fb48, 0x853da9bc39ed276d, 0xc8b2ca33a4b07f95, 0x57015415f1d4ab06, 0x7213dea9db90df6a, 0xf59419bc61e8aaed, 0xb021469ec88f6d5d, 0x455eb6ec37bd7a69, 0x6954a5df936bb612, 0x4a0e64cb22353812, 0xb944c4ba53566608, 0x26868c4f45446fe9, 0x918c46273dd1a6ad, 0x776aaa186d7c6b32, 0xb3a0a791b3e683cc, 0xeda2a71afa523afa, 0x4506c88fad99db45, 0x59cc8da493ba7034, 0x9e614853d8f35f3f, 0xcf3b2cd1c76b325b, 0x051c069f17ef6650, 0x6659aae9f49356c5, 0xde9deb131efacc5d, 0x556acbff6fa51655 }
};

// Check if square is passed pawn for white
bool is_white_passed_pawn(int32_t square, uint64_t black_pawns) {
    return (WHITE_PASSED_MASK[square] & black_pawns) == 0;
}

// Check if square is passed pawn for black
bool is_black_passed_pawn(int32_t square, uint64_t white_pawns) {
    return (BLACK_PASSED_MASK[square] & white_pawns) == 0;
}

// Get the pawn key for the current position
uint64_t get_pawn_key(const Board &board){
    uint64_t pawn_key = 0ull;
    uint64_t wp = board.pieces(PieceType::PAWN, Color::WHITE).getBits();
    uint64_t bp = board.pieces(PieceType::PAWN, Color::BLACK).getBits();
    while (wp){
        int32_t sq = pop_lsb(wp);
        pawn_key ^= PAWN_RANDOMS[0][sq];
    }
    while (bp){
        int32_t sq = pop_lsb(bp);
        pawn_key ^= PAWN_RANDOMS[1][sq];
    }
    return pawn_key;
}

// Get the non-pawn key for the current position
uint64_t get_non_pawn_key(const Board &board){
    uint64_t non_pawn_key = 0ull;
    uint64_t wn = board.pieces(chess::PieceType::KNIGHT, chess::Color::WHITE).getBits();
    uint64_t wb = board.pieces(chess::PieceType::BISHOP, chess::Color::WHITE).getBits();
    uint64_t wr = board.pieces(chess::PieceType::ROOK, chess::Color::WHITE).getBits();
    uint64_t wq = board.pieces(chess::PieceType::QUEEN, chess::Color::WHITE).getBits();
    uint64_t wk = board.pieces(chess::PieceType::KING, chess::Color::WHITE).getBits();
    uint64_t bn = board.pieces(chess::PieceType::KNIGHT, chess::Color::BLACK).getBits();
    uint64_t bb = board.pieces(chess::PieceType::BISHOP, chess::Color::BLACK).getBits();
    uint64_t br = board.pieces(chess::PieceType::ROOK, chess::Color::BLACK).getBits();
    uint64_t bq = board.pieces(chess::PieceType::QUEEN, chess::Color::BLACK).getBits();
    uint64_t bk = board.pieces(chess::PieceType::KING, chess::Color::BLACK).getBits();

    // Knights
    while (wn){
        int32_t sq = pop_lsb(wn);
        non_pawn_key ^= KNIGHT_RANDOMS[0][sq];
    }
    while (bn){
        int32_t sq = pop_lsb(bn);
        non_pawn_key ^= KNIGHT_RANDOMS[1][sq];
    }

    // Bishops
    while (wb){
        int32_t sq = pop_lsb(wb);
        non_pawn_key ^= BISHOP_RANDOMS[0][sq];
    }
    while (bb){
        int32_t sq = pop_lsb(bb);
        non_pawn_key ^= BISHOP_RANDOMS[1][sq];
    }

    // Rooks
    while (wr){
        int32_t sq = pop_lsb(wr);
        non_pawn_key ^= ROOK_RANDOMS[0][sq];
    }
    while (br){
        int32_t sq = pop_lsb(br);
        non_pawn_key ^= ROOK_RANDOMS[1][sq];
    }

    // Queens
    while (wq){
        int32_t sq = pop_lsb(wq);
        non_pawn_key ^= QUEEN_RANDOMS[0][sq];
    }
    while (bq){
        int32_t sq = pop_lsb(bq);
        non_pawn_key ^= QUEEN_RANDOMS[1][sq];
    }

    // Kings
    while (wk){
        int32_t sq = pop_lsb(wk);
        non_pawn_key ^= KING_RANDOMS[0][sq];
    }
    while (bk){
        int32_t sq = pop_lsb(bk);
        non_pawn_key ^= KING_RANDOMS[1][sq];
    }

    return non_pawn_key;
}

// Get the minors key for the current position
uint64_t get_minors_key(const Board &board){
    uint64_t minors_key = 0ull;
    uint64_t wn = board.pieces(chess::PieceType::KNIGHT, chess::Color::WHITE).getBits();
    uint64_t wb = board.pieces(chess::PieceType::BISHOP, chess::Color::WHITE).getBits();
    uint64_t bn = board.pieces(chess::PieceType::KNIGHT, chess::Color::BLACK).getBits();
    uint64_t bb = board.pieces(chess::PieceType::BISHOP, chess::Color::BLACK).getBits();

    // Knights
    while (wn){
        int32_t sq = pop_lsb(wn);
        minors_key ^= KNIGHT_RANDOMS[0][sq];
    }
    while (bn){
        int32_t sq = pop_lsb(bn);
        minors_key ^= KNIGHT_RANDOMS[1][sq];
    }

    // Bishops
    while (wb){
        int32_t sq = pop_lsb(wb);
        minors_key ^= BISHOP_RANDOMS[0][sq];
    }
    while (bb){
        int32_t sq = pop_lsb(bb);
        minors_key ^= BISHOP_RANDOMS[1][sq];
    }

    return minors_key;
}